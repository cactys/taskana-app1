stages:
  - build
  - release
  - deploy
  - notify

# cache:
#   paths:
#     - dist

variables:
  BUILD_NAME: "taskana-app1"
  VERSION: "1.0.${CI_PIPELINE_IID}"
  ARTIFACT_NAME: "${BUILD_NAME}-${VERSION}"
  ARTIFACT_URL: "${NEXUS_REPO_URL}/repository/${BUILD_NAME}/${VERSION}/${ARTIFACT_NAME}.tar.gz"

.default-rules:
  tags:
    - ubuntu_taskana_runner
  rules:
    - changes:
        - "src/**/*"

build-frontend-code-job:
  stage: build
  extends: .default-rules
  script:
    - npm install
    - npm run build
  environment:
    name: production
    url: https://taskana.khortys.space
    on_stop: stop_environment
  artifacts:
    name: "${ARTIFACT_NAME}"
    paths:
      - "./dist/*"
    expire_in: 1 week

stop_environment:
  stage: build
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Stopping environment"
  when: manual
  allow_failure: true
  environment:
    name: production
    action: stop

# sonarqube-frontend-sast:
#   stage: test
#   image: sonarsource/sonar-scanner-cli:latest
#   extends: .default-rules
#   script:
#     - cd ${FRONTEND_DIR}
#     - sonar-scanner -X ${SONAR_SETTINGS_FRONT}
#   allow_failure: false
#   needs:
#     - job: build-frontend-code-job

upload-frontend-release:
  stage: release
  extends: .default-rules
  script:
    - |
      tar czvf ${ARTIFACT_NAME}.tar.gz dist
      echo "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: ${ARTIFACT_URL}"
      if curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" \
        --upload-file ${ARTIFACT_NAME}.tar.gz \
        ${ARTIFACT_URL}; then
        echo "‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Nexus."
        echo "üìé –í–µ—Ä—Å–∏—è: ${VERSION}"
        echo "üì¶ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: ${ARTIFACT_NAME}.tar.gz"
      else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–±–æ—Ä–∫–∏ –≤ Nexus."
        exit 1
      fi
  needs:
    - job: build-frontend-code-job

deploy-frontend-job:
  extends: .default-rules
  stage: deploy
  before_script:
    #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ssh-agent –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ ssh
    - "command -v ssh-agent > /dev/null || ( apt-get update && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    #—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ä–∞–Ω–Ω–µ—Ä–∞
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - touch ~/.ssh/known_hosts
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ä–∞–Ω–µ–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å Nexus. –ü—Ä–∏ —ç—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–∞–Ω–µ–µ
    # –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫—Ä–µ–¥—ã –æ—Ç Nexus –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
    # - ssh -v ${DEV_USER}@${DEV_HOST}
    - apt-get update && apt-get install -y bash
    - ssh ${DEV_USER}@${DEV_HOST} "export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; export "ARTIFACT_URL=${ARTIFACT_URL}"; export "ARTIFACT_NAME=${ARTIFACT_NAME}";setsid /bin/bash -s " < deploy-frontend.sh
  needs:
    - job: upload-frontend-release

telegram-notification-frontend:
  stage: notify
  extends: .default-rules
  script:
    - |
      MESSAGE="üöÄ –í–ª–∞–¥–∏–º–∏—Ä –• Frontend —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!
      üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: ${ARTIFACT_URL}
      üîÑ –í–µ—Ç–∫–∞: ${CI_COMMIT_BRANCH}
      üìé –í–µ—Ä—Å–∏—è: ${VERSION}
      üì¶ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: ${ARTIFACT_NAME}.tar.gz"

      if curl -s -X POST -H 'Content-Type: application/json' \
        -d "{\"chat_id\": \"${TG_CHAT_ID}\", \"text\": \"${MESSAGE}\", \"parse_mode\": \"Markdown\"}" \
        https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage; then
        echo "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ."
      else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        exit 1
      fi
  needs:
    - job: upload-frontend-release
